/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 17:26:04 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(3111);
      aVLTree0.height();
      aVLTree0.find((-1));
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2336));
      aVLTree0.insert(0);
      aVLTree0.delete(1);
      aVLTree0.find(1);
      aVLTree0.delete(1);
      aVLTree0.insert((-1734));
      aVLTree0.delete((-2336));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(393);
      aVLTree0.insert((-1));
      aVLTree0.find(393);
      aVLTree0.delete(723);
      aVLTree0.insert((-2344));
      aVLTree0.delete(751);
      aVLTree0.insert(596);
      aVLTree0.delete(393);
      aVLTree0.insert(0);
      aVLTree0.insert(393);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(393);
      aVLTree0.getRoot();
      aVLTree0.delete((-1));
      aVLTree0.delete(393);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node2 = aVLTree_Node1.right;
      aVLTree_Node2.left = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.find(723);
      // Undeclared exception!
      try { 
        aVLTree0.insert(393);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2630));
      aVLTree0.insert((-379));
      aVLTree0.insert((-1));
      aVLTree0.delete(1);
      aVLTree0.find(1);
      aVLTree0.find(1);
      aVLTree0.find(1);
      aVLTree0.find(1);
      aVLTree0.find(1);
      aVLTree0.find((-2630));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.delete(726);
      aVLTree0.delete((-3171));
      aVLTree0.find(0);
      aVLTree0.delete(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.find(0);
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3387));
      aVLTree0.insert(1025);
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(416);
      aVLTree0.delete(416);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(416);
      aVLTree0.insert(416);
      aVLTree0.find(0);
      aVLTree0.find(416);
      aVLTree0.delete(416);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete((-384));
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      int int1 = (-1225);
      aVLTree0.delete((-1225));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      aVLTree_Node1.key = 2445;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.height = (-1225);
      aVLTree_Node0.key = 1;
      aVLTree0.find(1);
      // Undeclared exception!
      aVLTree0.find(1774);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 4302;
      aVLTree0.insert(4302);
      // Undeclared exception!
      try { 
        aVLTree0.insert(4302);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-1629);
      aVLTree0.delete((-1629));
      int int1 = 185;
      int int2 = (-289);
      aVLTree0.insert(1);
      aVLTree0.insert(185);
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.insert(749);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(0);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-954));
      aVLTree0.delete(2543);
      aVLTree0.insert(1566);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2479);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(2479);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2034);
      aVLTree0.delete(2034);
      aVLTree0.insert((-1697));
      aVLTree0.insert(2034);
      aVLTree0.insert((-1));
      aVLTree0.delete((-1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(526);
      int int0 = 1;
      aVLTree0.delete(1);
      int int1 = 0;
      aVLTree0.insert(0);
      aVLTree0.insert(526);
      aVLTree0.insert(1);
      aVLTree0.delete((-1844));
      int int2 = (-557);
      aVLTree0.delete((-1));
      int int3 = 1778;
      aVLTree0.delete(1778);
      aVLTree0.delete((-557));
      aVLTree0.delete(526);
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(3746);
      aVLTree0.insert((-718));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-718));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      int int0 = 1251;
      aVLTree0.insert(int0);
      aVLTree0.getBalance(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2987);
      aVLTree0.delete((-907));
      aVLTree0.insert((-907));
      aVLTree0.insert((-3));
      aVLTree0.delete((-3));
      aVLTree0.find((-907));
      aVLTree0.insert((-3));
      aVLTree0.find((-3));
      aVLTree0.insert((-1));
      aVLTree0.find((-907));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(1601);
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.delete(726);
      aVLTree0.insert(726);
      aVLTree0.insert(0);
      aVLTree0.delete((-1));
      aVLTree0.insert((-3171));
      aVLTree0.find(0);
      aVLTree0.delete(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      int int0 = 0;
      aVLTree0.delete(157);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.delete(3402);
      aVLTree0.insert(62);
      aVLTree0.insert(350);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1481));
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      int int0 = (-460);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.right.key = 0;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node1.key = (-460);
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree_Node0.key = 0;
      aVLTree0.delete(int0);
      aVLTree_Node1.right = aVLTree_Node0.right;
      aVLTree0.getBalance(aVLTree_Node0);
      int int1 = aVLTree0.height();
      int int2 = 0;
      aVLTree_Node0.height = int2;
      aVLTree0.insert(int1);
      int int3 = 1;
      aVLTree0.delete(int0);
      aVLTree0.delete(int3);
      aVLTree0.height();
      aVLTree0.height();
      int int4 = 0;
      aVLTree0.delete(int4);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      aVLTree0.height();
      int int5 = 0;
      aVLTree0.find(int5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      aVLTree_Node0.key = 0;
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.delete(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(1);
      aVLTree0.delete((-717));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(3111);
      aVLTree0.find(1);
      aVLTree0.insert(0);
      aVLTree0.insert(1880);
      aVLTree0.insert(3615);
      aVLTree0.getRoot();
      aVLTree0.delete((-1));
      aVLTree0.delete(1);
      aVLTree0.height();
      aVLTree0.find(4112);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert((-1075));
      aVLTree0.find(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.insert((-2166));
      aVLTree0.insert((-401));
      aVLTree_Node1.key = 0;
      aVLTree0.insert((-401));
      aVLTree_Node1.key = 1;
      aVLTree0.delete((-1075));
      aVLTree0.delete(1);
      aVLTree0.insert((-2081));
      aVLTree0.getRoot();
      aVLTree0.insert((-1075));
      aVLTree0.height();
      aVLTree0.find((-401));
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.height();
      aVLTree0.delete((-401));
      aVLTree0.find((-401));
      aVLTree0.height();
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert((-2166));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.delete((-560));
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(393);
      aVLTree0.insert((-1));
      aVLTree0.delete((-721));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(393);
      aVLTree0.delete(723);
      aVLTree0.insert((-2344));
      aVLTree0.delete(751);
      aVLTree0.delete((-721));
      aVLTree0.delete(393);
      aVLTree0.insert(0);
      aVLTree0.insert(393);
      aVLTree0.find(393);
      aVLTree0.getRoot();
      aVLTree0.delete((-1));
      aVLTree0.delete(393);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node2 = aVLTree_Node1.right;
      aVLTree_Node2.left = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.getRoot();
      aVLTree0.find(723);
      aVLTree0.insert(393);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.delete((-560));
      aVLTree0.insert(26);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(393);
      aVLTree0.insert((-1));
      aVLTree0.delete((-721));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(393);
      aVLTree0.delete(723);
      aVLTree0.insert((-2344));
      aVLTree0.delete(751);
      aVLTree0.delete((-721));
      aVLTree0.delete(393);
      aVLTree0.insert(0);
      aVLTree0.insert(393);
      aVLTree0.find(393);
      aVLTree0.getRoot();
      aVLTree0.delete((-1));
      aVLTree0.delete(393);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node2 = aVLTree_Node1.right;
      aVLTree_Node2.left = aVLTree_Node0;
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.getRoot();
      aVLTree0.find(723);
      aVLTree0.insert(393);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2336));
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      aVLTree0.delete(1);
      aVLTree0.find((-2556));
      aVLTree0.find(1);
      aVLTree0.delete(1);
      aVLTree0.delete(1610);
      aVLTree0.insert((-1761));
      aVLTree0.insert((-1734));
      aVLTree0.insert(1);
      aVLTree0.delete((-2336));
      aVLTree0.delete((-1));
      aVLTree0.getRoot();
      aVLTree0.find(1);
  }
}
